# -*- coding: utf-8 -*-
"""ChatGPT Review Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GczYKsh89sXKvWszmCY7cqMZYAWuprZr
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Load dataset
df = pd.read_csv("/content/drive/MyDrive/Crio.do/chatgpt_reviews.csv")   # replace with your file path

# Overview
print(df.head())
print(df.info())
print(df.describe())

# Standardize column names
df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")

print(df.columns)


# Handle missing reviews
df['review'] = df['review'].fillna("")

# Convert date if present
if 'review_date' in df.columns:
    df['review_date'] = pd.to_datetime(df['review_date'], errors='coerce')

# Ensure ratings are numeric
if 'ratings' in df.columns:
    df['ratings'] = pd.to_numeric(df['ratings'], errors='coerce')

print(df.columns)

def map_sentiment(ratings):
    if ratings >= 4:
        return "Positive"
    elif ratings == 3:
        return "Neutral"
    else:
        return "Negative"

df['sentiment'] = df['ratings'].apply(map_sentiment)
df[['review', 'ratings', 'sentiment']].head()

# Seaborn countplot
sns.countplot(data=df, x='sentiment', palette='viridis')
plt.title("Sentiment Distribution")
plt.show()

# Plotly interactive
fig = px.histogram(df, x="sentiment", color="sentiment", title="Sentiment Distribution (Interactive)")
fig.show()

plt.figure(figsize=(8,5))
sns.histplot(df['ratings'], bins=5, kde=False, color="blue")
plt.title("Ratings Distribution")
plt.xlabel("Rating")
plt.ylabel("Count")
plt.show()

from collections import Counter
import re

# Tokenize reviews into words (basic cleaning)
tokens = []
for review in df['review']:
    words = re.findall(r'\b\w+\b', str(review).lower())
    tokens.extend(words)

# Remove stopwords manually
stopwords = set(["the", "and", "is", "to", "of", "a", "in", "it", "this", "for", "that"])
tokens = [word for word in tokens if word not in stopwords]

# Count most common keywords
word_freq = Counter(tokens).most_common(20)
word_df = pd.DataFrame(word_freq, columns=["word", "count"])

# Plot
plt.figure(figsize=(10,6))
sns.barplot(data=word_df, x="count", y="word", palette="mako")
plt.title("Top 20 Frequent Keywords in Reviews")
plt.show()

if 'review_date' in df.columns:
    monthly_sales = df.groupby(df['review_date'].dt.to_period('M'))['ratings'].count()
    monthly_sales.plot(kind='line', marker='o', figsize=(10,5))
    plt.title("Monthly Review Volume Trend")
    plt.ylabel("Number of Reviews")
    plt.show()